package ch.eawag.chemeql;

import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;


class AdsorptionRangeDialog extends ProceedCancelDialog
{
	private static AdsorptionRangeDialog INSTANCE;

	static AdsorptionRangeDialog getInstance(ChemEQL3 parent) {
		if (INSTANCE == null) {
			INSTANCE = new AdsorptionRangeDialog(parent);
		}
		return INSTANCE;
	}

	private double currentStart;
	private double currentEnd;
	private double currentStep;

	// Constructor for creating a bean
	public AdsorptionRangeDialog() {
		initComponents();
	}

	private AdsorptionRangeDialog(ChemEQL3 parent) {
		super(parent);
		initComponents();
		setLocation(300, 250);
		addComponentListener(new ComponentAdapter()
		{
			@Override
			public void componentShown(ComponentEvent arg0) {
				startTF.setText("");
				endTF.setText("");
				stepTF.setText("");
				proceedButton.setEnabled(false);
			}
		});
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
   private void initComponents()//GEN-BEGIN:initComponents
   {
      java.awt.GridBagConstraints gridBagConstraints;
      javax.swing.JTextArea infoTA;
      javax.swing.JLabel label;
      javax.swing.JLabel label2;
      javax.swing.JLabel label3;
      javax.swing.JLabel label4;
      javax.swing.JPanel rangePanel;

      label = new javax.swing.JLabel();
      infoTA = new javax.swing.JTextArea();
      infoTA.setFont(label.getFont());
      rangePanel = new javax.swing.JPanel();
      label2 = new javax.swing.JLabel();
      startTF = new KeyListeningTextField()
      {
         void keyPressedActivity()
         {
            checkInputs();
         }
      };

      label3 = new javax.swing.JLabel();
      endTF = new KeyListeningTextField()
      {
         void keyPressedActivity()
         {
            checkInputs();
         }
      };

      label4 = new javax.swing.JLabel();
      stepTF = new KeyListeningTextField()
      {
         void keyPressedActivity()
         {
            checkInputs();
         }
      };

      setTitle("Adsorption range");
      label.setText("Give the range of the particulate concentration in [g/l] :");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.insets = new java.awt.Insets(12, 0, 8, 0);
      getControls().add(label, gridBagConstraints);

      infoTA.setEditable(false);
      infoTA.setLineWrap(true);
      infoTA.setRows(4);
      infoTA.setText("In case of several adsorbents, only the amount of the first adsorbent can be varied. Total solid concentration in [g/l] will be printed in the first column of the output.\n");
      infoTA.setWrapStyleWord(true);
      infoTA.setOpaque(false);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 0;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.weighty = 1.0;
      getControls().add(infoTA, gridBagConstraints);

      rangePanel.setLayout(new java.awt.GridBagLayout());

      label2.setText("from:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 0;
      gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 4);
      rangePanel.add(label2, gridBagConstraints);

      startTF.setColumns(5);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 0;
      rangePanel.add(startTF, gridBagConstraints);

      label3.setText("to:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 0;
      gridBagConstraints.insets = new java.awt.Insets(0, 16, 0, 4);
      rangePanel.add(label3, gridBagConstraints);

      endTF.setColumns(5);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 0;
      rangePanel.add(endTF, gridBagConstraints);

      label4.setText("step:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 0;
      gridBagConstraints.insets = new java.awt.Insets(0, 16, 0, 4);
      rangePanel.add(label4, gridBagConstraints);

      stepTF.setColumns(5);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 0;
      gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
      rangePanel.add(stepTF, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.weightx = 1.0;
      getControls().add(rangePanel, gridBagConstraints);

      pack();
   }//GEN-END:initComponents

	private void checkInputs() {
		try {
			currentStart = Double.parseDouble(startTF.getText());
			currentEnd = Double.parseDouble(endTF.getText());
			currentStep = Double.parseDouble(stepTF.getText());
			proceedButton.setEnabled(true);
		} catch (NumberFormatException ex) {
			proceedButton.setEnabled(false);
		}
	}

	protected void doCancel() {
		/*cancel, restore default*/
		main.adsRange = false;
		main.outputFormat = OutputFormat.REGULAR;
		main.graphCmd.setEnabled(false);
		main.formatMenu.setEnabled(false);
		main.pHrangeCmd.setEnabled(true);
		main.compRangeCmd.setEnabled(true);
		super.doCancel();
	}

	protected void doProceed() {
		if (currentStart == 0) {
			MyTools.showError("Error in concentration range: "
					+ "Start concentration can`t be zero! Try a very small number.");
			startTF.setText("1e-20");		/*erste Komponente schreiben*/

		}
		else if (currentStart >= currentEnd || currentStep >= (currentEnd - currentStart)) {
			MyTools.showError("Start concentration must be smaller than end concentration"
					+ " and step must be smaller than difference between start and end!");
		}
		else {
			main.matrix.adsRangeStart = currentStart;
			main.matrix.adsRangeEnd = currentEnd;
			main.matrix.adsRangeStep = currentStep;

			main.adsRange = true;
			main.outputFormat = OutputFormat.INTERVAL;
			main.graphCmd.setEnabled(true);
			main.formatMenu.setEnabled(true);	/*activate formats*/

			main.pHrangeCmd.setEnabled(false);
			main.compRangeCmd.setEnabled(false);
			super.doProceed();
		}
	}
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JTextField endTF;
   private javax.swing.JTextField startTF;
   private javax.swing.JTextField stepTF;
   // End of variables declaration//GEN-END:variables
}
