package ch.eawag.chemeql;

import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;



class ComponentRangeDialog extends ProceedCancelDialog
{
	private static ComponentRangeDialog INSTANCE;
	static ComponentRangeDialog getInstance(ChemEQL3 parent)
	{
		if (INSTANCE == null)
			INSTANCE = new ComponentRangeDialog(parent);
		return INSTANCE;
	}

	private double currentStart;
	private double currentEnd;
	private double currentStep;

	// Constructor for creating a bean
	public ComponentRangeDialog()
	{
		initComponents();
	}
	
	private ComponentRangeDialog(ChemEQL3 m)
	{
		super(m);
		initComponents();
		setLocation(300,250);
		addComponentListener(new ComponentAdapter() {
			@Override
			public void componentShown(ComponentEvent arg0)
			{
				componentsCB.setModel(main.matrix.createComponentsCBModel());
				componentsCB.setSelectedIndex(0);
				main.pHfix = main.matrix.isHorHplusAndFree();
				infoTF.setText("* * *  pH is"
					+ (main.pHfix ? " " : " not ") + "constant  * * *");
				linChecker.setSelected(true);
				startTF.setText("");
				endTF.setText("");
				stepTF.setText("");
				startTF.requestFocusInWindow();
				startTF.selectAll();
				proceedButton.setEnabled(false);
			}
		});
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
   private void initComponents()//GEN-BEGIN:initComponents
   {
      java.awt.GridBagConstraints gridBagConstraints;
      javax.swing.JLabel label1;
      javax.swing.JLabel label2;
      javax.swing.JLabel label3;
      javax.swing.JLabel label4;

      numFormatButtons = new javax.swing.ButtonGroup();
      label1 = new javax.swing.JLabel();
      componentsCB = new javax.swing.JComboBox();
      linChecker = new javax.swing.JCheckBox();
      logChecker = new javax.swing.JCheckBox();
      infoTF = new javax.swing.JTextField();
      label2 = new javax.swing.JLabel();
      startTF = new KeyListeningTextField()
      {
         void keyPressedActivity()
         {
            checkInputs();
         }
      };

      label3 = new javax.swing.JLabel();
      endTF = new KeyListeningTextField()
      {
         void keyPressedActivity()
         {
            checkInputs();
         }
      };

      label4 = new javax.swing.JLabel();
      stepTF = new KeyListeningTextField()
      {
         void keyPressedActivity()
         {
            checkInputs();
         }
      };

      setTitle("Component range");
      label1.setText("select:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
      getControls().add(label1, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = 4;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      getControls().add(componentsCB, gridBagConstraints);

      numFormatButtons.add(linChecker);
      linChecker.setText("linear");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(8, 0, 0, 0);
      getControls().add(linChecker, gridBagConstraints);

      numFormatButtons.add(logChecker);
      logChecker.setText("logarithmic");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(0, 0, 8, 0);
      getControls().add(logChecker, gridBagConstraints);

      infoTF.setEditable(false);
      infoTF.setBorder(null);
      infoTF.setOpaque(false);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 2;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.gridwidth = 4;
      gridBagConstraints.gridheight = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
      getControls().add(infoTF, gridBagConstraints);

      label2.setText("from:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 3;
      gridBagConstraints.insets = new java.awt.Insets(0, 16, 0, 4);
      getControls().add(label2, gridBagConstraints);

      startTF.setColumns(5);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 3;
      getControls().add(startTF, gridBagConstraints);

      label3.setText("to:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 3;
      gridBagConstraints.insets = new java.awt.Insets(0, 16, 0, 4);
      getControls().add(label3, gridBagConstraints);

      endTF.setColumns(5);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 3;
      getControls().add(endTF, gridBagConstraints);

      label4.setText("step:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 3;
      gridBagConstraints.insets = new java.awt.Insets(0, 16, 0, 4);
      getControls().add(label4, gridBagConstraints);

      stepTF.setColumns(5);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 3;
      getControls().add(stepTF, gridBagConstraints);

      pack();
   }//GEN-END:initComponents

	private void checkInputs()
	{
		try
		{
			currentStart = Double.parseDouble(startTF.getText());
			currentEnd = Double.parseDouble(endTF.getText());
			currentStep = Double.parseDouble(stepTF.getText());
			proceedButton.setEnabled(true);
		}
		catch (NumberFormatException ex)
		{
			currentStart = Double.NaN;
			currentEnd = Double.NaN;
			currentStep = Double.NaN;
			proceedButton.setEnabled(false);
		}
	}

	protected void doCancel()
	{
		/*cancel, restore default*/
		main.compRange = false;
		if(main.matrix.isHorHplusAndFree())
			main.pHrange = true;
		main.outputFormat = OutputFormat.REGULAR;
		main.compRangeIsLog = false;
		main.numFormat.setSelected(NumFormatEnum.LINEAR,true);

		main.formatMenu.setEnabled(false);
		main.graphCmd.setEnabled(false);
		main.pHrangeCmd.setEnabled(true);
		if (main.matrix.adsorption())
			main.adsRangeCmd.setEnabled(true);
		super.doCancel();
	}
	
	protected void doProceed()
	{
		if (currentStart == 0)
		{
			MyTools.showError("Error in concentration range: "
				+ "Start concentration can`t be zero! Try a very small number.");
			startTF.setText("1e-20");		/*erste Komponente schreiben*/
		}
		else if (logChecker.isSelected() &&
			(currentStart >= currentEnd || currentStep <= 0 || currentStep >= (currentEnd - currentStart)))
			MyTools.showError("Start concentration must be smaller than end concentration!"
				+ " Give step in log units, e.g. from \"-8\" to \"-2\" step \"0.5\"");
		else if (linChecker.isSelected() &&
			(currentStart >= currentEnd || currentStep >= (currentEnd - currentStart)))
			MyTools.showError("Start concentration must be smaller than end concentration"
				+ " and step must be smaller than range between start and end!");
		else if (linChecker.isSelected() && (currentStart < 0 || currentEnd < 0))
			MyTools.showError("Negative concentrations are not sensible!");
		else if (main.matrix.components[componentsCB.getSelectedIndex()].mode == Mode.SOLID_PHASE)
			MyTools.showError("Your matrix says this component is a solid phase.");
		else if (componentsCB.getSelectedIndex() == main.matrix.totComp-1
			&& main.matrix.isHorHplusAndFree())
			MyTools.showError("Your matrix says this component is the pH which is held constant."
				+ " Choose command \"pH range ...\"!");
		else
		{
			main.matrix.compRangeStart = currentStart;
			main.matrix.compRangeEnd = currentEnd;
			main.matrix.compRangeStep = currentStep;
			main.matrix.compNo = componentsCB.getSelectedIndex();
			if (logChecker.isSelected())
			{
				main.compRangeIsLog = true;
				main.numFormat.setSelected(NumFormatEnum.LOGARITHMIC,true);
			}
			else
			{
				main.compRangeIsLog = false;		
				main.numFormat.setSelected(NumFormatEnum.LINEAR,true);
			}
			main.compRange = true;
			main.pHrange = false;
			main.outputFormat = OutputFormat.INTERVAL;
			main.formatMenu.setEnabled(true);	/*activate formats*/
			main.graphCmd.setEnabled(true);		/*activate graphics*/
			main.pHrangeCmd.setEnabled(false);
			main.adsRangeCmd.setEnabled(false);
			super.doProceed();
		}
	}
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JComboBox componentsCB;
   private javax.swing.JTextField endTF;
   private javax.swing.JTextField infoTF;
   private javax.swing.JCheckBox linChecker;
   private javax.swing.JCheckBox logChecker;
   private javax.swing.ButtonGroup numFormatButtons;
   private javax.swing.JTextField startTF;
   private javax.swing.JTextField stepTF;
   // End of variables declaration//GEN-END:variables
	
}
