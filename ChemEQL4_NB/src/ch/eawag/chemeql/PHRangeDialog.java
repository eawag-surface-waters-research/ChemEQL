package ch.eawag.chemeql;

import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;


class PHRangeDialog extends ProceedCancelDialog
{
	private static PHRangeDialog INSTANCE;

	static PHRangeDialog getInstance(ChemEqlGuiController parent)
	{
		if (INSTANCE == null)
			INSTANCE = new PHRangeDialog(parent);
		return INSTANCE;
	}

	private double currentStart;
	private double currentEnd;
	private double currentStep;

	// Constructor for creating a bean
	public PHRangeDialog()
	{
		initComponents();
	}

	private PHRangeDialog(ChemEqlGuiController main)
	{
		super(main);
		initComponents();
		setLocation(300,250);
		addComponentListener(new ComponentAdapter() {
			@Override
			public void componentShown(ComponentEvent ev)
			{
				startTF.setText("");
				endTF.setText("");
				stepTF.setText("");
				startTF.requestFocusInWindow();
				proceedButton.setEnabled(false);
			}
		});
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
   private void initComponents()//GEN-BEGIN:initComponents
   {
      java.awt.GridBagConstraints gridBagConstraints;
      javax.swing.JLabel label1;
      javax.swing.JLabel label2;
      javax.swing.JLabel label3;
      javax.swing.JLabel label4;

      label1 = new javax.swing.JLabel();
      label2 = new javax.swing.JLabel();
      startTF = new KeyListeningTextField()
      {
         void keyPressedActivity()
         {
            checkInputs();
         }
      };

      label3 = new javax.swing.JLabel();
      endTF = new KeyListeningTextField()
      {
         void keyPressedActivity()
         {
            checkInputs();
         }
      };

      label4 = new javax.swing.JLabel();
      stepTF = new KeyListeningTextField()
      {
         void keyPressedActivity()
         {
            checkInputs();
         }
      };

      setTitle("pH range");
      label1.setText("Give pH-interval:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = 6;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 0);
      getControls().add(label1, gridBagConstraints);

      label2.setText("from:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 1;
      gridBagConstraints.insets = new java.awt.Insets(0, 16, 0, 4);
      getControls().add(label2, gridBagConstraints);

      startTF.setColumns(4);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 1;
      getControls().add(startTF, gridBagConstraints);

      label3.setText("to:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 1;
      gridBagConstraints.insets = new java.awt.Insets(0, 16, 0, 4);
      getControls().add(label3, gridBagConstraints);

      endTF.setColumns(4);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 1;
      getControls().add(endTF, gridBagConstraints);

      label4.setText("step:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 1;
      gridBagConstraints.insets = new java.awt.Insets(0, 16, 0, 4);
      getControls().add(label4, gridBagConstraints);

      stepTF.setColumns(4);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 1;
      getControls().add(stepTF, gridBagConstraints);

      pack();
   }//GEN-END:initComponents

	private void checkInputs()
	{
		try
		{
			currentStart = Double.parseDouble(startTF.getText());
			currentEnd = Double.parseDouble(endTF.getText());
			currentStep = Double.parseDouble(stepTF.getText());
			proceedButton.setEnabled(true);
		}
		catch (NumberFormatException ex)
		{
			currentStart = Double.NaN;
			currentEnd = Double.NaN;
			currentStep = Double.NaN;
			proceedButton.setEnabled(false);
		}
	}

	protected void doCancel()
	{
		/*cancel button, restore default*/
		main.pHrange = false;
		main.outputFormat = OutputFormat.REGULAR;
		main.graphMI.setDisable(true);
		main.formatMenu.setDisable(true);
		main.pHconstMI.setDisable(false);
		main.compRangeMI.setDisable(false);
		if (main.matrix.adsorption())
			main.adsRangeMI.setDisable(false);
		super.doCancel();
	}

	protected void doProceed()
	{
		if (currentStart >= currentEnd)
			MyTools.showError("Start value must be smaller than end value!");
		else if (currentEnd - currentStart < currentStep)
			MyTools.showError("Range too small or step to large!");
		else
		{
			main.pHrangeStart = currentStart;
			main.pHrangeEnd = currentEnd;
			main.pHrangeStep = currentStep;
			main.pHrange = true;
			main.outputFormat = OutputFormat.INTERVAL;
			main.graphMI.setDisable(false);
			main.formatMenu.setDisable(false);
			main.pHconstMI.setDisable(true);
			main.compRangeMI.setDisable(true);
			main.adsRangeMI.setDisable(true);
			super.doProceed();
		}
	}
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JTextField endTF;
   private javax.swing.JTextField startTF;
   private javax.swing.JTextField stepTF;
   // End of variables declaration//GEN-END:variables

}
