package ch.eawag.chemeql;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import javax.swing.JRadioButton;


class KineticsDialog extends ProceedCancelDialog implements ActionListener
{
	private static KineticsDialog INSTANCE;
	static KineticsDialog getInstance(ChemEQL3 parent)
	{
		if (INSTANCE == null)
			INSTANCE = new KineticsDialog(parent);
		return INSTANCE;
	}
	
	private JRadioButton oldSelection;		// delete this line if rb4 gets functional
	private int currentCoeffC, currentCoeffD, currentCoeffP;
	private double currentRateConst, currentKBack;
	private double currentKinTimeEnd, currentKinTimeInc;

	// Constructor for creating a bean
	public KineticsDialog()
	{
		initComponents();
	}
	
	private KineticsDialog(ChemEQL3 parent)
	{
		super(parent);
		initComponents();
		setLocation(300,100);
		rb2.addActionListener(this);
		rb3.addActionListener(this);
		rb4.addActionListener(this);
		rb5.addActionListener(this);
		rb6.addActionListener(this);
		rb7.addActionListener(this);
		rb8.addActionListener(this);
		addComponentListener(new ComponentAdapter() {
			@Override
			public void componentShown(ComponentEvent ev)
			{
				main.outputFormat = OutputFormat.INTERVAL;
				proceedButton.setEnabled(false);
				rb2.setSelected(true);
				oldSelection = rb2;					// delete this line if rb4 gets functional
				kBackLabel24.setEnabled(false);
				kBackTF25.setEnabled(false);
				coeffCTF15.requestFocusInWindow();
				coeffCTF15.setText("");
				coeffPTF18.setText("");
				coeffDTF21.setText("");
				rateKTF23.setText("");
				kBackTF25.setText("");
				intervalTF27.setText("");
				endTF29.setText("");

				kinCompC13.setModel(main.matrix.createComponentsCBModel());
				kinCompC13.setSelectedIndex(0);
				kinCompP16.setModel(main.matrix.createComponentsCBModel());
				kinCompP16.setSelectedIndex(1);
				kinCompD19.setModel(main.matrix.createComponentsCBModel());
				kinCompD19.setSelectedIndex(Math.min(2,kinCompD19.getItemCount()-1));

				enableKinCompD(false);
			}
		});
	}
		
	private void enableKinCompD(boolean enabled)
	{
		eductDLabel19.setEnabled(enabled);
		kinCompD19.setEnabled(enabled);
		coeffDLabel20.setEnabled(enabled);
		coeffDTF21.setEnabled(enabled);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
   private void initComponents()//GEN-BEGIN:initComponents
   {
      javax.swing.JLabel coeffCLabel;
      javax.swing.JLabel coeffPLabel;
      javax.swing.JLabel eductCLabel;
      javax.swing.JLabel endLabel;
      javax.swing.JLabel firstOrderLabel;
      java.awt.GridBagConstraints gridBagConstraints;
      javax.swing.JLabel intervalLabel;
      javax.swing.JPanel paramsPanel;
      javax.swing.JLabel productLabel;
      javax.swing.JPanel productsPanel;
      javax.swing.JLabel rateKLabel;
      javax.swing.JPanel rateLawsPanel;
      javax.swing.JLabel secondOrderLabel;
      javax.swing.JSeparator seperator1;
      javax.swing.JSeparator seperator2;
      javax.swing.JLabel thirdOrderLabel;
      javax.swing.JLabel zeroOrderLabel;

      rateLawGroup = new javax.swing.ButtonGroup();
      rateLawsPanel = new javax.swing.JPanel();
      zeroOrderLabel = new javax.swing.JLabel();
      rb2 = new javax.swing.JRadioButton();
      firstOrderLabel = new javax.swing.JLabel();
      rb3 = new javax.swing.JRadioButton();
      rb4 = new javax.swing.JRadioButton();
      secondOrderLabel = new javax.swing.JLabel();
      rb5 = new javax.swing.JRadioButton();
      rb6 = new javax.swing.JRadioButton();
      rb7 = new javax.swing.JRadioButton();
      thirdOrderLabel = new javax.swing.JLabel();
      rb8 = new javax.swing.JRadioButton();
      seperator1 = new javax.swing.JSeparator();
      productsPanel = new javax.swing.JPanel();
      eductCLabel = new javax.swing.JLabel();
      kinCompC13 = new javax.swing.JComboBox();
      coeffCLabel = new javax.swing.JLabel();
      coeffCTF15 = new KeyListeningTextField()
      {
         void keyPressedActivity()
         {
            checkInputs();
         }
      };

      productLabel = new javax.swing.JLabel();
      kinCompP16 = new javax.swing.JComboBox();
      coeffPLabel = new javax.swing.JLabel();
      coeffPTF18 = new KeyListeningTextField()
      {
         void keyPressedActivity()
         {
            checkInputs();
         }
      };

      eductDLabel19 = new javax.swing.JLabel();
      kinCompD19 = new javax.swing.JComboBox();
      coeffDLabel20 = new javax.swing.JLabel();
      coeffDTF21 = new KeyListeningTextField()
      {
         void keyPressedActivity()
         {
            checkInputs();
         }
      };

      seperator2 = new javax.swing.JSeparator();
      paramsPanel = new javax.swing.JPanel();
      rateKLabel = new javax.swing.JLabel();
      rateKTF23 = new KeyListeningTextField()
      {
         void keyPressedActivity()
         {
            checkInputs();
         }
      };

      intervalLabel = new javax.swing.JLabel();
      intervalTF27 = new KeyListeningTextField()
      {
         void keyPressedActivity()
         {
            checkInputs();
         }
      };

      kBackLabel24 = new javax.swing.JLabel();
      kBackTF25 = new KeyListeningTextField()
      {
         void keyPressedActivity()
         {
            checkInputs();
         }
      };

      endLabel = new javax.swing.JLabel();
      endTF29 = new KeyListeningTextField()
      {
         void keyPressedActivity()
         {
            checkInputs();
         }
      };

      setTitle("Kinetics");
      rateLawsPanel.setLayout(new java.awt.GridBagLayout());

      zeroOrderLabel.setText("zero order:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
      rateLawsPanel.add(zeroOrderLabel, gridBagConstraints);

      rb2.setText("cC -> pP + ...       -d[C]/dt = k");
      rateLawGroup.add(rb2);
      rb2.setMargin(new java.awt.Insets(0, 2, 0, 2));
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
      rateLawsPanel.add(rb2, gridBagConstraints);

      firstOrderLabel.setText("first order:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(5, 0, 3, 0);
      rateLawsPanel.add(firstOrderLabel, gridBagConstraints);

      rb3.setText("cC -> pP + ...       -d[C]/dt = k[C]");
      rateLawGroup.add(rb3);
      rb3.setMargin(new java.awt.Insets(0, 2, 0, 2));
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
      rateLawsPanel.add(rb3, gridBagConstraints);

      rb4.setText("C <-> S + ...         -d[C]/dt = k(f)[C] - k(b)[S]  (reversible)");
      rateLawGroup.add(rb4);
      rb4.setMargin(new java.awt.Insets(0, 2, 0, 2));
      rb4.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            rb4ActionPerformed(evt);
         }
      });

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
      rateLawsPanel.add(rb4, gridBagConstraints);

      secondOrderLabel.setText("second order:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(5, 0, 3, 0);
      rateLawsPanel.add(secondOrderLabel, gridBagConstraints);

      rb5.setText("cC -> pP + ...       -d[C]/dt = k[C][C]");
      rateLawGroup.add(rb5);
      rb5.setMargin(new java.awt.Insets(0, 2, 0, 2));
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
      rateLawsPanel.add(rb5, gridBagConstraints);

      rb6.setText("C+D -> P + ...      -d[C]/dt = k[C][D]");
      rateLawGroup.add(rb6);
      rb6.setMargin(new java.awt.Insets(0, 2, 0, 2));
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
      rateLawsPanel.add(rb6, gridBagConstraints);

      rb7.setText("C -> P + ...           -d[C]/dt = k[C][P]  (autocatalysis)");
      rateLawGroup.add(rb7);
      rb7.setMargin(new java.awt.Insets(0, 2, 0, 2));
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
      rateLawsPanel.add(rb7, gridBagConstraints);

      thirdOrderLabel.setText("third order:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(5, 0, 3, 0);
      rateLawsPanel.add(thirdOrderLabel, gridBagConstraints);

      rb8.setText("cC -> pP + ...       -d[C] = k[C][C][C]");
      rateLawGroup.add(rb8);
      rb8.setMargin(new java.awt.Insets(0, 2, 0, 2));
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
      rateLawsPanel.add(rb8, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
      getControls().add(rateLawsPanel, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      getControls().add(seperator1, gridBagConstraints);

      productsPanel.setLayout(new java.awt.GridBagLayout());

      eductCLabel.setText("educt C:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 0;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 6);
      productsPanel.add(eductCLabel, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 0;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 12);
      productsPanel.add(kinCompC13, gridBagConstraints);

      coeffCLabel.setText("coeff c:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 0;
      gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 6);
      productsPanel.add(coeffCLabel, gridBagConstraints);

      coeffCTF15.setColumns(4);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 0;
      productsPanel.add(coeffCTF15, gridBagConstraints);

      productLabel.setText("product:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 1;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 6);
      productsPanel.add(productLabel, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 12);
      productsPanel.add(kinCompP16, gridBagConstraints);

      coeffPLabel.setText("coeff. p:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 1;
      gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 6);
      productsPanel.add(coeffPLabel, gridBagConstraints);

      coeffPTF18.setColumns(4);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 1;
      productsPanel.add(coeffPTF18, gridBagConstraints);

      eductDLabel19.setText("educt D:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 2;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 6);
      productsPanel.add(eductDLabel19, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 12);
      productsPanel.add(kinCompD19, gridBagConstraints);

      coeffDLabel20.setText("coeff. d:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 2;
      gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 6);
      productsPanel.add(coeffDLabel20, gridBagConstraints);

      coeffDTF21.setColumns(4);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 2;
      productsPanel.add(coeffDTF21, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
      getControls().add(productsPanel, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      getControls().add(seperator2, gridBagConstraints);

      paramsPanel.setLayout(new java.awt.GridBagLayout());

      rateKLabel.setText("rate constant k =");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
      paramsPanel.add(rateKLabel, gridBagConstraints);

      rateKTF23.setColumns(7);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      paramsPanel.add(rateKTF23, gridBagConstraints);

      intervalLabel.setText("time interval dt =");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
      paramsPanel.add(intervalLabel, gridBagConstraints);

      intervalTF27.setColumns(4);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
      paramsPanel.add(intervalTF27, gridBagConstraints);

      kBackLabel24.setText("k(back) =");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 2;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 4);
      paramsPanel.add(kBackLabel24, gridBagConstraints);

      kBackTF25.setColumns(7);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 3;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      paramsPanel.add(kBackTF25, gridBagConstraints);

      endLabel.setText("time end =");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 2;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 4);
      paramsPanel.add(endLabel, gridBagConstraints);

      endTF29.setColumns(4);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 3;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
      paramsPanel.add(endTF29, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
      getControls().add(paramsPanel, gridBagConstraints);

      pack();
   }//GEN-END:initComponents

	private void rb4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rb4ActionPerformed
	{//GEN-HEADEREND:event_rb4ActionPerformed
		// Add your handling code here:
	}//GEN-LAST:event_rb4ActionPerformed
	
	public void actionPerformed(ActionEvent e)
	{
		Object source = e.getSource();
		if (source == rb4)
		{
			MyTools.showWarning("Not in function yet!");	// delete this line if rb4 gets functional
			oldSelection.doClick();								// delete this line if rb4 gets functional
			return;													// delete this line if rb4 gets functional
//			kBackLabel24.setEnabled(true);					// uncomment this line if rb4 gets functional
//			kBackTF25.setEnabled(true);						// uncomment this line if rb4 gets functional
		}
		else
		{
			kBackLabel24.setEnabled(false);
			kBackTF25.setEnabled(false);
		}
		enableKinCompD(source == rb6);
		checkInputs();
		oldSelection = (JRadioButton)source;				// delete this line if rb4 gets functional
	}

	private void checkInputs()
	{
		try
		{
			currentCoeffC = Integer.parseInt(coeffCTF15.getText());
			currentCoeffP = Integer.parseInt(coeffPTF18.getText());
			if (rb6.isSelected())
				currentCoeffD = Integer.parseInt(coeffDTF21.getText());
			currentRateConst = Double.parseDouble(rateKTF23.getText());
			if (rb4.isSelected())
				currentKBack = Double.parseDouble(kBackTF25.getText());
			currentKinTimeInc = Double.parseDouble(intervalTF27.getText());
			currentKinTimeEnd = Double.parseDouble(endTF29.getText());
			proceedButton.setEnabled(true);
		}
		catch (NumberFormatException ex)
		{
			proceedButton.setEnabled(false);
		}
	}

	protected void doCancel()
	{
		/*cancel button, restore old value*/
		main.doKinetik = false;
		main.graphCmd.setEnabled(false);
		main.formatMenu.setEnabled(false);
		main.compRangeCmd.setEnabled(true);
		main.logKrangeCmd.setEnabled(true);
		if (main.matrix.isHorHplusAndFree())
			main.pHrangeCmd.setEnabled(true);
		if (main.matrix.adsorption())
			main.adsRangeCmd.setEnabled(true);
		super.doCancel();
	}
	
	protected void doProceed()
	{
		if (((Component)kinCompC13.getSelectedItem()).conc <= 0)
			MyTools.showError("Error in matrix: Concentration of the kinetic component must be > 0!");
		else if (currentKinTimeInc > currentKinTimeEnd)
			MyTools.showError("Input error: Ttime increment must be smaller than time range!");
		else
		{
			main.outputFormat = OutputFormat.INTERVAL;
			main.doKinetik = true;
			main.graphCmd.setEnabled(true);				/*activate graphics*/
			main.formatMenu.setEnabled(true);			/*activate formats*/
			main.pHrangeCmd.setEnabled(false);
			main.compRangeCmd.setEnabled(false);
			main.adsRangeCmd.setEnabled(false);
			main.logKrangeCmd.setEnabled(false);

			// set reaction order
			if (rb2.isSelected())
				main.matrix.reactionOrder = 0;
			else if (rb3.isSelected())
				main.matrix.reactionOrder = 10;
			else if (rb4.isSelected())
				main.matrix.reactionOrder = 11;
			else if (rb5.isSelected())
				main.matrix.reactionOrder = 20;
			else if (rb6.isSelected())
				main.matrix.reactionOrder = 21;
			else if (rb7.isSelected())
				main.matrix.reactionOrder = 22;
			else
			{
				// assert rb8.isSelected();
				main.matrix.reactionOrder = 30;
			}

			// set educts and products
			main.matrix.kinCompC = kinCompC13.getSelectedIndex();
			main.matrix.kinCompP = kinCompP16.getSelectedIndex();
			main.matrix.kinCompD = kinCompD19.getSelectedIndex();
			main.matrix.coeffC = currentCoeffC;
			main.matrix.coeffD = currentCoeffD;
			main.matrix.coeffP = currentCoeffP;

			// set rate and time parameters
			main.matrix.rateConst = currentRateConst;
			main.matrix.kBack = currentKBack;
			main.matrix.kinTimeInc = currentKinTimeInc;
			main.matrix.kinTimeEnd = currentKinTimeEnd;

			super.doProceed();
		}
	}
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JTextField coeffCTF15;
   private javax.swing.JLabel coeffDLabel20;
   private javax.swing.JTextField coeffDTF21;
   private javax.swing.JTextField coeffPTF18;
   private javax.swing.JLabel eductDLabel19;
   private javax.swing.JTextField endTF29;
   private javax.swing.JTextField intervalTF27;
   private javax.swing.JLabel kBackLabel24;
   private javax.swing.JTextField kBackTF25;
   private javax.swing.JComboBox kinCompC13;
   private javax.swing.JComboBox kinCompD19;
   private javax.swing.JComboBox kinCompP16;
   private javax.swing.JTextField rateKTF23;
   private javax.swing.ButtonGroup rateLawGroup;
   private javax.swing.JRadioButton rb2;
   private javax.swing.JRadioButton rb3;
   private javax.swing.JRadioButton rb4;
   private javax.swing.JRadioButton rb5;
   private javax.swing.JRadioButton rb6;
   private javax.swing.JRadioButton rb7;
   private javax.swing.JRadioButton rb8;
   // End of variables declaration//GEN-END:variables
}
