package ch.eawag.chemeql;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;


class EditSpeciesDialog extends ProceedCancelDialog
{
	private static EditSpeciesDialog INSTANCE;
	static EditSpeciesDialog getInstance(ChemEQL3 parent)
	{
		if (INSTANCE == null)
			INSTANCE = new EditSpeciesDialog(parent);
		return INSTANCE;
	}
	
	private Library library;

	// Constructor for creating a bean
	public EditSpeciesDialog()
	{
		initComponents();
	}

	private EditSpeciesDialog(ChemEQL3 parent)
	{
		super(parent);
		getRootPane().setDefaultButton(null);
		initComponents();

		speciesScroller.setMinimumSize(speciesScroller.getPreferredSize());
		speciesScroller.setMaximumSize(speciesScroller.getPreferredSize());
		speciesList.addListSelectionListener(new ListSelectionListener()
		{
			public void valueChanged(ListSelectionEvent evt)
			{
				updateData();
			}
		});

		acceptButton.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent ev)
			{
				String newName = nameTF.getText();
				int l = newName.length();
				if (l == 0)
					MyTools.showError("Please provide a name!");
				else if (l > 50)
					MyTools.showError("Name too long!");
				else
					try
					{
						int i = speciesList.getSelectedIndex();
						Species spec = library.libSpecies[i];
						spec.constant = Double.parseDouble(logKTF.getText());
						spec.name = nameTF.getText();
						spec.source = litTF.getText();
						library.changedSpecies(i);
						resetButton.setEnabled(false);
						acceptButton.setEnabled(false);
						proceedButton.setEnabled(true);
					}
					catch (NumberFormatException ex)
					{
						MyTools.showError("Your log K input is not a number!");
					}
			}
		});

		resetButton.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent ev)
			{
				updateData();
			}
		});

		newButton.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent ev)
			{
				NewSpeciesDialog dlg = NewSpeciesDialog.getInstance();
				dlg.show(library);
				Species species = dlg.newSpecies();
				if (species == null)
					;	// dialog was cancelled
				else
				{
					int index = library.insertSpecies(species,dlg.stoichCoeffs());
					speciesList.ensureIndexIsVisible(index);
					speciesList.setSelectedIndex(index);
					proceedButton.setEnabled(true);
				}
			}
		});

		deleteButton.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent ev)
			{
				int i = speciesList.getSelectedIndex();
				speciesList.clearSelection();
				library.deleteSpeciesAtIndex(i);
				proceedButton.setEnabled(true);
			}
		});
		setLocation(100,100);
	}

	void show(Library lib)
	{
		if (library != lib)
		{
			library = lib;
			setTitle("Edit Species (" + library.libraryType() + " Library)");
			speciesList.setModel(library.getSpeciesListModel());
			speciesList.ensureIndexIsVisible(0);
		}
		speciesList.clearSelection();
		setEditPanelEnabled(false);
		resetButton.setEnabled(false);
		acceptButton.setEnabled(false);
		deleteButton.setEnabled(false);
		proceedButton.setEnabled(false);
		super.setVisible(true);
	}

	private void updateData()
	{
		int i = speciesList.getSelectedIndex();
		speciesList.ensureIndexIsVisible(i);
		boolean specSelected = i >= 0;
		setEditPanelEnabled(specSelected);
		if (specSelected)
		{
			Species spec = library.libSpecies[i];
			equationTF.setText(library.equationFor(i));
			nameTF.setText(spec.name);
			logKTF.setText(MyTools.EXACT_2_DIGITS.format(spec.constant));
			litTF.setText(spec.source.replace(Tokenizer.TAB,' '));
		}
		else
		{
			equationTF.setText("");
			nameTF.setText("");
			logKTF.setText("");
			litTF.setText("");
		}
		
		resetButton.setEnabled(false);
		acceptButton.setEnabled(false);
		deleteButton.setEnabled(specSelected);
	}

	private void setEditPanelEnabled(boolean enabled)
	{
		nameTF.setEnabled(enabled);
		logKTF.setEnabled(enabled);
		litTF.setEnabled(enabled);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
   private void initComponents()//GEN-BEGIN:initComponents
   {
      javax.swing.JPanel editPanel;
      java.awt.GridBagConstraints gridBagConstraints;
      javax.swing.JLabel litLabel;
      javax.swing.JLabel logKLabel;

      speciesScroller = new javax.swing.JScrollPane();
      speciesList = new javax.swing.JList();
      equationTF = new javax.swing.JTextField();
      editPanel = new javax.swing.JPanel();
      nameTF = new KeyListeningTextField()
      {
         void keyPressedActivity()
         {
            didEdit();
         }
      };

      logKLabel = new javax.swing.JLabel();
      logKTF = new KeyListeningTextField()
      {
         void keyPressedActivity()
         {
            didEdit();
         }
      };

      litLabel = new javax.swing.JLabel();
      litTF = new KeyListeningTextField()
      {
         void keyPressedActivity()
         {
            didEdit();
         }
      };

      buttonPanel = new javax.swing.JPanel();
      resetButton = new javax.swing.JButton();
      acceptButton = new javax.swing.JButton();
      newButton = new javax.swing.JButton();
      deleteButton = new javax.swing.JButton();
      filler = new javax.swing.JPanel();

      speciesScroller.setBorder(new javax.swing.border.TitledBorder(null, "Species Selection", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
      speciesScroller.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
      speciesScroller.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
      speciesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
      speciesList.setVisibleRowCount(12);
      speciesScroller.setViewportView(speciesList);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 0;
      gridBagConstraints.gridheight = 5;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weighty = 1.0;
      gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 6);
      getControls().add(speciesScroller, gridBagConstraints);

      equationTF.setEditable(false);
      equationTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
      equationTF.setBorder(new javax.swing.border.EtchedBorder(javax.swing.border.EtchedBorder.RAISED));
      equationTF.setMinimumSize(new java.awt.Dimension(100, 20));
      equationTF.setPreferredSize(new java.awt.Dimension(100, 20));
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 0;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.ipady = 6;
      gridBagConstraints.weightx = 3.0;
      gridBagConstraints.insets = new java.awt.Insets(10, 0, 8, 0);
      getControls().add(equationTF, gridBagConstraints);

      editPanel.setLayout(new java.awt.GridBagLayout());

      editPanel.setBorder(new javax.swing.border.TitledBorder(null, "Edit", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
      nameTF.setColumns(24);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 0;
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
      editPanel.add(nameTF, gridBagConstraints);

      logKLabel.setText("Log K:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(6, 4, 0, 4);
      editPanel.add(logKLabel, gridBagConstraints);

      logKTF.setColumns(4);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 4);
      editPanel.add(logKTF, gridBagConstraints);

      litLabel.setText("Literatur:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(6, 4, 0, 4);
      editPanel.add(litLabel, gridBagConstraints);

      litTF.setColumns(4);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 4);
      editPanel.add(litTF, gridBagConstraints);

      buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 8, 6));

      resetButton.setText("Reset");
      buttonPanel.add(resetButton);

      acceptButton.setText("Accept");
      buttonPanel.add(acceptButton);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 3;
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
      editPanel.add(buttonPanel, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.insets = new java.awt.Insets(10, 0, 8, 0);
      getControls().add(editPanel, gridBagConstraints);

      newButton.setText("New Species");
      newButton.setMaximumSize(new java.awt.Dimension(120, 26));
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.insets = new java.awt.Insets(10, 12, 0, 12);
      getControls().add(newButton, gridBagConstraints);

      deleteButton.setText("Delete Species");
      deleteButton.setMaximumSize(new java.awt.Dimension(120, 26));
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 3;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.insets = new java.awt.Insets(18, 12, 30, 12);
      getControls().add(deleteButton, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 4;
      gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
      getControls().add(filler, gridBagConstraints);

      pack();
   }//GEN-END:initComponents
	
	private void didEdit()
	{
		resetButton.setEnabled(true);
		acceptButton.setEnabled(true);
	}

	protected void doCancel()
	{
		if (proceedButton.isEnabled())
		{
			if (JOptionPane.showConfirmDialog(this,
				"Do you really want to dismiss all changes made in this dialog?",
				ChemEQL3.AN,JOptionPane.YES_NO_OPTION) == JOptionPane.OK_OPTION)
			{
				main.reloadLibrary(library);
				super.doCancel();
			}
		}
		else
			super.doCancel();
	}
	
	protected void doProceed()
	{
		library.writeBinary();
		super.doProceed();
	}

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton acceptButton;
   private javax.swing.JPanel buttonPanel;
   private javax.swing.JButton deleteButton;
   private javax.swing.JTextField equationTF;
   private javax.swing.JPanel filler;
   private javax.swing.JTextField litTF;
   private javax.swing.JTextField logKTF;
   private javax.swing.JTextField nameTF;
   private javax.swing.JButton newButton;
   private javax.swing.JButton resetButton;
   private javax.swing.JList speciesList;
   private javax.swing.JScrollPane speciesScroller;
   // End of variables declaration//GEN-END:variables
}
