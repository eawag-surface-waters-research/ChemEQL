package ch.eawag.chemeql;

import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;


class IterationParametersDialog extends ProceedCancelDialog implements ItemListener
{
	private static IterationParametersDialog INSTANCE;
	static IterationParametersDialog getInstance(ChemEqlGuiController parent)
	{
		if (INSTANCE == null)
			INSTANCE = new IterationParametersDialog(parent);
		return INSTANCE;
	}

	static final int MAX_ITERATIONS_DEFAULT = 50;
	static final double INITIAL_CONV_CRIT = 1e-6;

	private int currentMaxIterationsInput;
	int maxIterations;
	boolean autoConvCrit;
	boolean markIter;


	// Constructor for creating a bean
	public IterationParametersDialog()
	{
		initComponents();
	}

	private IterationParametersDialog(ChemEqlGuiController main)
	{
		super(main);
		initComponents();
		displayAutoAdaptCriteriaChecker.addItemListener(this);
		displayIterationsChecker.addItemListener(this);
		setLocation(300,350);
		addComponentListener(new ComponentAdapter() {
			@Override
			public void componentShown(ComponentEvent arg0)
			{
				maxIterationsTF.setText(Integer.toString(maxIterations));
				initialCriteriaTF.setText(Double.toString(INITIAL_CONV_CRIT));
				displayAutoAdaptCriteriaChecker.setSelected(autoConvCrit);
				displayIterationsChecker.setSelected(markIter);
				proceedButton.setEnabled(false);
			}
		});
	}

	private void maxIterationsChanged()
	{
		try
		{
			currentMaxIterationsInput = Integer.parseInt(maxIterationsTF.getText());
			proceedButton.setEnabled(true);
		}
		catch (NumberFormatException ex)
		{
			proceedButton.setEnabled(false);
		}
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
   private void initComponents()//GEN-BEGIN:initComponents
   {
      java.awt.GridBagConstraints gridBagConstraints;
      javax.swing.JLabel label1;
      javax.swing.JLabel label2;

      label1 = new javax.swing.JLabel();
      maxIterationsTF = new KeyListeningTextField()
      {
         void keyPressedActivity()
         {
            maxIterationsChanged();
         }
      };
      label2 = new javax.swing.JLabel();
      initialCriteriaTF = new javax.swing.JTextField();
      displayAutoAdaptCriteriaChecker = new javax.swing.JCheckBox();
      displayIterationsChecker = new javax.swing.JCheckBox();

      setTitle("Iteration parameters");
      label1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
      label1.setText("Maximum number of iterations:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 0;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.insets = new java.awt.Insets(0, 0, 8, 6);
      getControls().add(label1, gridBagConstraints);

      maxIterationsTF.setColumns(5);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 0;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(0, 0, 8, 0);
      getControls().add(maxIterationsTF, gridBagConstraints);

      label2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
      label2.setText("Convergence criteria:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 6);
      getControls().add(label2, gridBagConstraints);

      initialCriteriaTF.setColumns(5);
      initialCriteriaTF.setEditable(false);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 8);
      getControls().add(initialCriteriaTF, gridBagConstraints);

      displayAutoAdaptCriteriaChecker.setText("Change convergence criteria automatically, write \" ! \"");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      getControls().add(displayAutoAdaptCriteriaChecker, gridBagConstraints);

      displayIterationsChecker.setText("Write \"*\" for each iteration");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 3;
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      getControls().add(displayIterationsChecker, gridBagConstraints);

      pack();
   }//GEN-END:initComponents

	public void itemStateChanged(ItemEvent ev)
	{
		proceedButton.setEnabled(true);
	}

	protected void doCancel()
	{
		super.doCancel();
	}

	protected void doProceed()
	{
		maxIterations = currentMaxIterationsInput;
		autoConvCrit = displayAutoAdaptCriteriaChecker.isSelected();
		markIter = displayIterationsChecker.isSelected();
		super.doProceed();
	}
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JCheckBox displayAutoAdaptCriteriaChecker;
   private javax.swing.JCheckBox displayIterationsChecker;
   private javax.swing.JTextField initialCriteriaTF;
   private javax.swing.JTextField maxIterationsTF;
   // End of variables declaration//GEN-END:variables
}
